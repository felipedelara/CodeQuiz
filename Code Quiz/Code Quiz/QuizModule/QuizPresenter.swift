//
//  QuizPresenter.swift
//  Code Quiz
//
//  Created by Felipe on 02/09/19.
//  Copyright (c) 2019 Felipe de Lara. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class QuizPresenter {

    // MARK: - Private properties -

    private unowned let view: QuizViewInterface
    private let interactor: QuizInteractorInterface
    private let wireframe: QuizWireframeInterface

    
    var keywords : [String] = []
    var correctAnswers = [String]()

    
    // MARK: - Lifecycle -

    init(view: QuizViewInterface, interactor: QuizInteractorInterface, wireframe: QuizWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension QuizPresenter: QuizPresenterInterface {
    func notifyViewDidLoad() {
        print("Presenters is aware that view finished loaded")
        view.setupInitialView()

        view.showLoading()
        interactor.fetchCorrectKeywords(){ [weak self] success, keywords in
            self?.view.hideLoading()
            self?.keywords = keywords?.answer ?? []
            //update interface
        }
    }
    
    func notifyViewDidAppear() {
        print("Presenters is aware that view finished appearing")
    }
    
    func keyworkdsTextViewDidChange(text: String) {
        for keyword in self.keywords{
            if text == keyword.uppercased(){
                var keyworkAlreadyExists = false
                
                for answer in correctAnswers{
                    if text == answer{
                        keyworkAlreadyExists = true
                    }
                }
                
                if !keyworkAlreadyExists{
                    view.reloadView(toFitState: .gotKeywordRight)
                    //todo update viewmodel
//                    self.view.text textField.text = ""
//                    correctAnswers.append(text)
//                    self.wordCounterLabel.text = "\(correctAnswers.count)/\(keywords.count)"
//                    self.wordsTableView.reloadData()
//
//                    if self.keywords.count == self.correctAnswers.count{
//                        self.presentVictory()
//                    }
                }
            }
        }
    }
    
    func keywordsFetchSuccess(keywords: Keywords) {
        //todo update viewmodel
        print("Presenters got keywords from interactor")
        view.hideLoading()
    }
    
    func keywordsFetchFailed(with errorMessage: String) {
        //todo update viewmodel
        print("Presenters failed getting keywords from interactor")
//        view.hideLoading()

    }
    
}
